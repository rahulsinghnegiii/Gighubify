import React, { useState, useEffect } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { useAuth } from '@/lib/contexts/AuthContext';
import { getOrder } from '@/lib/services/order.service';
import { 
  createPayment, 
  PaymentGateway,
  completeStripePayment 
} from '@/lib/services/payment.service';
import { getUserLocationInfo } from '@/lib/utils/geo.util';
import { CreditCard, AlertCircle, CheckCircle, ChevronsUpDown } from 'lucide-react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

declare global {
  interface Window {
    Stripe: any;
  }
}

type PaymentMethod = {
  id: string;
  name: string;
  gateway: PaymentGateway;
  description: string;
  icon: React.ReactNode;
};

const Checkout = () => {
  const { orderId } = useParams<{ orderId: string }>();
  const location = useLocation();
  const navigate = useNavigate();
  const { currentUser, userProfile } = useAuth();
  
  const [order, setOrder] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [processing, setProcessing] = useState<boolean>(false);
  const [success, setSuccess] = useState<boolean>(false);
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string | null>(null);
  const [locationInfo, setLocationInfo] = useState<{
    countryCode: string;
    currency: string;
    isIndian: boolean;
  } | null>(null);
  
  // Get order details
  useEffect(() => {
    const fetchOrder = async () => {
      if (!orderId) {
        setError('Order ID is missing');
        setLoading(false);
        return;
      }
      
      try {
        const orderData = await getOrder(orderId);
        if (!orderData) {
          setError('Order not found');
          setLoading(false);
          return;
        }
        
        // Make sure the current user is the buyer
        if (orderData.buyerId !== currentUser?.uid) {
          setError('You are not authorized to access this order');
          setLoading(false);
          return;
        }
        
        // If order is already paid, redirect to order details
        if (orderData.isPaid) {
          navigate(`/dashboard`);
          return;
        }
        
        setOrder(orderData);
        
        // Get location info to determine currency
        const locationData = await getUserLocationInfo();
        setLocationInfo(locationData);
        
        // Only set up Stripe payment methods regardless of location
        const methods: PaymentMethod[] = [
          {
            id: 'stripe_card',
            name: 'Credit/Debit Card',
            gateway: PaymentGateway.STRIPE,
            description: 'Pay using Visa, Mastercard, or American Express',
            icon: <CreditCard className="h-5 w-5" />
          }
        ];
        
        setPaymentMethods(methods);
        setSelectedPaymentMethod(methods[0].id);
        setLoading(false);
      } catch (err: any) {
        setError(err.message || 'Failed to load order details');
        setLoading(false);
      }
    };
    
    fetchOrder();
  }, [orderId, currentUser, navigate]);
  
  // Load payment SDK scripts
  useEffect(() => {
    if (!locationInfo) return;
    
    // Always load Stripe SDK
    const script = document.createElement('script');
    script.src = 'https://js.stripe.com/v3/';
    script.async = true;
    document.body.appendChild(script);
    
    return () => {
      document.body.removeChild(script);
    };
  }, [locationInfo]);
  
  const handlePaymentMethodChange = (value: string) => {
    setSelectedPaymentMethod(value);
  };
  
  // Function to get the total amount regardless of property name used
  const getOrderAmount = (order) => {
    // Check if totalAmount exists, otherwise use price
    return order.totalAmount !== undefined ? order.totalAmount : order.price;
  };
  
  // Add a helper function to safely get package details
  const getPackageDetails = (order) => {
    return order.packageDetails || {
      name: 'Service Package',
      deliveryTime: order.deliveryTime || 3,
      revisions: 1
    };
  };
  
  const initializePayment = async () => {
    if (!order || !selectedPaymentMethod || !locationInfo) return;
    
    setProcessing(true);
    setError(null);
    
    try {
      const selectedMethod = paymentMethods.find(method => method.id === selectedPaymentMethod);
      if (!selectedMethod) {
        throw new Error('Selected payment method not found');
      }
      
      // Get the amount using the helper function
      const amount = getOrderAmount(order);
      
      // Always use Stripe for payments
      const result = await createPayment(
        order.id,
        amount,
        locationInfo.currency,
        PaymentGateway.STRIPE
      );
      
      const { paymentId, gatewayData } = result;
      
      // Initialize Stripe checkout
      await handleStripeCheckout(paymentId, gatewayData);
    } catch (err: any) {
      setError(err.message || 'Failed to initialize payment');
      setProcessing(false);
    }
  };
  
  const handleStripeCheckout = async (paymentId: string, gatewayData: any) => {
    try {
      // Initialize Stripe
      const stripe = window.Stripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);
      
      // Confirm the payment
      const { error, paymentIntent } = await stripe.confirmCardPayment(gatewayData.client_secret, {
        payment_method: {
          card: {
            // In a real implementation, we'd use Stripe Elements here
            // For this example, we're redirecting to Stripe Checkout
            token: 'tok_visa', // Test token
          },
          billing_details: {
            name: userProfile?.displayName || '',
            email: userProfile?.email || '',
          },
        },
      });
      
      if (error) {
        throw new Error(error.message);
      } else if (paymentIntent.status === 'succeeded') {
        // Complete the payment
        const success = await completeStripePayment(
          paymentId,
          order.id,
          paymentIntent.id
        );
        
        if (success) {
          setSuccess(true);
          setTimeout(() => {
            navigate('/dashboard');
          }, 2000);
        } else {
          setError('Payment completion failed');
        }
      }
    } catch (err: any) {
      setError(err.message || 'Payment failed');
    } finally {
      setProcessing(false);
    }
  };
  
  if (loading) {
    return (
      <div className="min-h-[calc(100vh-200px)] flex items-center justify-center">
        <div className="h-12 w-12 rounded-full border-4 border-primary/30 border-t-primary animate-spin mb-4"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="container max-w-4xl mx-auto py-12 px-4">
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
        <div className="flex justify-center mt-6">
          <Button onClick={() => navigate('/dashboard')}>Return to Dashboard</Button>
        </div>
      </div>
    );
  }
  
  if (success) {
    return (
      <div className="container max-w-4xl mx-auto py-12 px-4">
        <Alert className="mb-6 bg-green-50 border-green-500">
          <CheckCircle className="h-4 w-4 text-green-500" />
          <AlertTitle>Payment Successful</AlertTitle>
          <AlertDescription>Your payment has been processed successfully. Redirecting to your dashboard...</AlertDescription>
        </Alert>
      </div>
    );
  }
  
  if (!order) {
    return (
      <div className="container max-w-4xl mx-auto py-12 px-4">
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>Order not found</AlertDescription>
        </Alert>
        <div className="flex justify-center mt-6">
          <Button onClick={() => navigate('/dashboard')}>Return to Dashboard</Button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="container max-w-4xl mx-auto py-12 px-4">
      <h1 className="text-3xl font-bold tracking-tight mb-6">Checkout</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="md:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Payment Method</CardTitle>
              <CardDescription>Select your preferred payment method</CardDescription>
            </CardHeader>
            
            <CardContent>
              <div className="space-y-4">
                {paymentMethods.length > 0 ? (
                  <>
                    <Select onValueChange={handlePaymentMethodChange} defaultValue={selectedPaymentMethod || undefined}>
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Select payment method" />
                      </SelectTrigger>
                      <SelectContent>
                        {paymentMethods.map((method) => (
                          <SelectItem key={method.id} value={method.id}>
                            <div className="flex items-center gap-2">
                              {method.icon}
                              <span>{method.name}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    
                    {selectedPaymentMethod && (
                      <div className="mt-4 p-4 bg-muted rounded-md">
                        <p className="text-sm text-muted-foreground">
                          {paymentMethods.find(m => m.id === selectedPaymentMethod)?.description}
                        </p>
                      </div>
                    )}
                  </>
                ) : (
                  <div className="text-center py-4">
                    <p>No payment methods available</p>
                  </div>
                )}
              </div>
            </CardContent>
            
            <CardFooter>
              <Button 
                size="lg" 
                className="w-full" 
                onClick={initializePayment}
                disabled={processing || !selectedPaymentMethod}
              >
                {processing ? (
                  <>
                    <div className="h-4 w-4 rounded-full border-2 border-primary/30 border-t-primary animate-spin mr-2"></div>
                    Processing...
                  </>
                ) : (
                  `Pay ${locationInfo?.currency || 'USD'} ${getOrderAmount(order).toFixed(2)}`
                )}
              </Button>
            </CardFooter>
          </Card>
        </div>
        
        <div>
          <Card>
            <CardHeader>
              <CardTitle>Order Summary</CardTitle>
            </CardHeader>
            
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Service</span>
                  <span className="font-medium">{getPackageDetails(order).name}</span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Delivery Time</span>
                  <span className="font-medium">{getPackageDetails(order).deliveryTime} days</span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Revisions</span>
                  <span className="font-medium">{getPackageDetails(order).revisions}</span>
                </div>
                
                <Separator />
                
                <div className="flex justify-between">
                  <span className="font-medium">Total</span>
                  <span className="font-bold">{locationInfo?.currency || 'USD'} {getOrderAmount(order).toFixed(2)}</span>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <div className="mt-4">
            <Button 
              variant="outline" 
              className="w-full"
              onClick={() => navigate('/dashboard')}
            >
              Cancel Payment
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Checkout; 